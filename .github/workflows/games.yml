name: Download Multiple Bots Wins & Draws (Fast + Safe)

on:
  workflow_dispatch:
    inputs:
      bot_names:
        description: "Comma-separated Lichess bot usernames"
        required: true
        default: "AttackKing_Bot,ToromBot,Endogenetic-Bot,NNUE_Drift,MaggiChess16,NimsiluBot"

jobs:
  download-wins-draws-fast:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install jq and parallel
        run: sudo apt-get update && sudo apt-get install -y jq parallel

      - name: Calculate “since” timestamp 
        id: time
        run: |
          # Change this to the earliest date to fetch from
          SINCE=$(date -d "2024-03-01 00:00:00 UTC" +%s)000
          echo "since=$SINCE" >> "$GITHUB_OUTPUT"

      - name: Download and filter games in parallel
        run: |
          download_bot_games() {
            BOT="$1"
            echo "Processing $BOT..."

            JSON_FILE="${BOT}.json"
            PGN_FILE="${BOT}.pgn"

            # Download all games since date in NDJSON format
            curl -s -L "https://lichess.org/api/games/user/${BOT}" \
              -G \
              --data-urlencode "since=${SINCE}" \
              --data-urlencode "max=5000" \
              -H "Accept: application/x-ndjson" \
              > "$JSON_FILE"

            # Skip if no games or bad response
            if ! grep -q '"id"' "$JSON_FILE"; then
              echo "No games found for $BOT since given date"
              rm -f "$JSON_FILE"
              return
            fi

            # Filter wins and draws (case-insensitive match + null handling)
            FILTERED_IDS=$(jq -r --arg BOT "$BOT" '
              select((.players.white.user.name | ascii_downcase) == ($BOT | ascii_downcase)
                and (((.winner // null) == "white") or ((.winner // null) == null))) |
              .id,
              select((.players.black.user.name | ascii_downcase) == ($BOT | ascii_downcase)
                and (((.winner // null) == "black") or ((.winner // null) == null))) |
              .id
            ' "$JSON_FILE")

            if [ -z "$FILTERED_IDS" ]; then
              echo "No wins/draws for $BOT"
              rm -f "$JSON_FILE"
              return
            fi

            # Fetch PGN for filtered games
            curl -s -L "https://lichess.org/api/games/export/_ids" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -H "Accept: application/x-chess-pgn" \
              --data-urlencode "ids=$(echo $FILTERED_IDS | tr '\n' ',')" \
              > "$PGN_FILE"

            rm -f "$JSON_FILE"
            echo "Saved PGN for $BOT"
          }

          export -f download_bot_games
          export SINCE=${{ steps.time.outputs.since }}

          # Run 3 bots at the same time for speed
          echo "${{ github.event.inputs.bot_names }}" | tr ',' '\n' | parallel -j 3 download_bot_games {}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit and push PGN files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add *.pgn
          git commit -m "Update PGN files for bots" || echo "No changes to commit"
          git push
